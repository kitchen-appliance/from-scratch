464C457F             # ELF file header magic number
02                   # 64-bit format 
01                   # little endian
01                   # original and current version of ELF
00                   # System V ABI
0000000000000000     # padding to offset 16
0002                 # executable
003E                 # AMD x86-64
00000001             # original and current version of ELF
00000000004001B8     # memory address of entry point
0000000000000040     # offset of start of the program header table
0000000000000000     # offset of the section header table
00000000             # flags
0040                 # size of the header in bytes
0038                 # size of a program header table entry in bytes
0003                 # number of entries in the program header table
000000000000         # no section headers - padding to offset 64
# ----------------------------------------------------------------------------
00000001 00000005    # loadable segment r-x
00000000000001B8     # offset of the segment in the file image
00000000004001B8     # virtual address of the segment in memory
00000000004001B8     # reserved for segments physical address
0000000000000291     # size in bytes of the segment in the file image
0000000000000291     # size in bytes of the segment in memory
0000000000000001     # no alignment
# -----------------------------------------------------------------------------
00000001 00000004    # loadable segment r--
00000000000000E8     # offset of the segment in the file image
00000000004010E8     # virtual address of the segment in memory
00000000004010E8     # reserved for segments physical address
00000000000000D1     # size in bytes of the segment in the file image
00000000000000D1     # size in bytes of the segment in memory
0000000000000001     # no alignment
# -----------------------------------------------------------------------------
00000001 00000006    # loadable segment rw-
0000000000000000     # offset of the segment in the file image
0000000000402000     # virtual address of the segment in memory
0000000000402000     # reserved for segments physical address
0000000000000000     # size in bytes of the segment in the file image
0000000000001000     # size in bytes of the segment in memory
0000000000000001     # no alignment
# -----------------------------------------------------------------------------
75 73 61 67 65 3A 20 # msg1@+0000: u  s  a  g  e  :  \s
68 74 6F 69 20 5B 69 #             h  t  o  i  \s [  i
6E 70 75 74 20 66 69 #             n  p  u  t  \s f  i
6C 65 5D 20 5B 6F 75 #             l  e  ]  \s [  o  u
74 70 75 74 20 66 69 #             t  p  u  t  \s f  i
6C 65 5D 0A          #             l  e  ]  \n
                     # usage: htoi [input file] [output file]\n (39 bytes long)
63 6F 75 6C 64 20 6E # msg2@+0027: c  o  u  l  d  \s n
6F 74 20 6F 70 65 6E #             o  t  \s o  p  e  n
20 69 6E 70 75 74 20 #             \s i  n  p  u  t  \s
66 69 6C 65 0A       #             f  i  l  e  \n
                     # could not open input file\n (26 bytes long)
73 74 61 74 20 6F 6E # msg3@+0041: s  t  a  t  \s o  n
20 69 6E 70 75 74 20 #             \s i  n  p  u  t  \s
66 69 6C 65 20 66 61 #             f  i  l  e  \s f  a
69 6C 65 64 0A       #             i  l  e  d  \n
                     # stat on input file failed\n (26 bytes long)
69 6E 70 75 74 20 66 # msg4@+005B: i  n  p  u  t  \s  f
69 6C 65 20 69 73 20 #             i  l  e  \s i  s  \s
65 6D 70 74 79 0A    #             e  m  p  t  y  \n
                     # input file is empty\n (20 bytes long)
66 61 69 6C 65 64 20 # msg5@+006F: f  a  i  l  e  d  \s
74 6F 20 6D 61 70 20 #             t  o  \s m  a  p  \s
69 6E 70 75 74 20 66 #             i  n  p  u  t  \s  f
69 6C 65 0A          #             i  l  e  \n
                     # failed to map input file\n (25 bytes long)
69 6E 76 61 6C 69 64 # msg6@+0089: i  n  v  a  l  i  d
20 63 68 61 72 61 63 #             \s c  h  a  r  a  c
74 65 72 0A          #             t  e  r  \n
                     # invalid character\n (18 bytes long)
6E 75 6D 62 65 72 20 # msg7@+009B: n  u  m  b  e  r  \s
68 61 73 20 74 6F 6F #             h  a  s  \s t  o  o
20 6D 61 6E 79 20 64 #             \s m  a  n  y  \s d
69 67 69 74 73 0A    #             i  g  i  t  s  \n
                     # number has too many digits\n (27 bytes long)
66 61 69 6C 65 64 20 # msg8@+00B6: f  a  i  l  e  d  \s
74 6F 20 6F 70 65 6E #             t  o  \s o  p  e  n
20 6F 75 74 70 75 74 #             \s o  u  t  p  u  t
20 66 69 6C 65 0A    #             \s f  i  l  e  \n
                     # failed to open output file\n (27 bytes long)
# -----------------------------------------------------------------------------
83 3C 24 03          # grp1.im8>rm cmp[sib] s[1]i[n]b[msp] im8[3]
                     # set flags of int32@rsp - 3
74 22                # jz rel8[22]
                     # if zero flag is set (int32@ = 3) rip := rip + 22
BF 00000002          # mov.im>di im32[2]
                     # rdi := 2 (stderr)
BE 004010E8          # mov.im>si im32[4010E8]
                     # rsi := msg1@4010E8 (usage information)
BA 00000027          # mov.im>d im32[27]
                     # rdx := 27 (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax:= length written (write error message to stderr)
BF 00000001          # mov.im>di im32[1]
                     # rdi := 1 (status code)
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C (exit syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 1
48 8B 7C 24 10       # rexw mov.rm>r r[di]rm[sib+disp8] s[1]i[n]b[msp] disp8[10]
                     # rdi := int64@rsp+10
31 F6                # xor.r>rm r[si]rm[si]
                     # rsi := 0 (read only flag)
B8 00000002          # mov.im>a im32[2]
                     # rax := 2 (open syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := input file descriptor (open input file)
85 C0                # test.r&rm r[a]rm[a]
                     # set flags for eax and eax (identity)
79 1D                # jns rel8[1D]
                     # if signed flag is set (eax negative) rip := rip + 23
BF 00000002          # mov.im>edi im32[2]
                     # rdi := 2 (stderr)
BE 0040110F          # mov.im>si im32[40110F]
                     # rsi := msg2@40110F (could not open input file)
BA 0000001A          # mov.im>d im32[1A]
                     # rdx := 1A (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C (exit syscall)
                     # rdi := 2 (status code)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 2
89 C7                # mov.r>rm r[a]rm[di]
                     # rdi := rax (input file descriptor)
BE 00402000          # mov.im>si im32[402000]
                     # rsi := data@402000
B8 00000005          # mov.im>a im32[5]
                     # rax := 5 (fstat syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # data@402000 := stat structure (fstat file)
85 C0                # test.r&rm r[a]rm[a]
                     # set flags for eax and eax (identity)
79 29                # jns rel8[29]
                     # if sign flag not set (eax not negative) rip := rip + 29
B8 00000003          # mov.im>a im32[3]
                     # rax := 3 (close syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := status (close input file descriptor)
BF 00000002          # mov.im>di im32[2]
                     # rdi := 2 (stderr)
BE 00401129          # mov.im>si im32[401129]
                     # rsi := msg3@401129 (stat on input file failed)
BA 0000001A          # mov.im>d im32[1A]
                     # rdx := 1A (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000003          # mov.im>di im32[3]
                     # rdi := 3 (status code)
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C (exit syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 3
8B 34 25 00402030    # mov.rm>r r[si]rm[sib] s[1]i[n]b[disp32] 
                     # esi := len@data(402000)+30(offset of file length field)
85 F6                # test.r&rm r[si]rm[si]
                     # set flags for esi and esi (identity)
75 29                # jnz rel8[29]
                     # if zero flag is not set (esi != 0) rip := rip + 29
B8 00000003          # mov.im>a im32[3]
                     # rax := 3 (close syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := status (close input file descriptor)
BF 00000002          # mov.im>edi im32[2]
                     # rdi := 2 (stderr)
BE 00401143          # mov.im>si im32[401143]
                     # rsi := msg4@401143
BA 00000014          # mov.im>d im32[14]
                     # rdx := 14 (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000004          # mov.im>di im32[4]
                     # rdi := 4 (status code)
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C (exit syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 4
41 89 F8             # rexb mov.r>rm r[di]rm[8]
                     # r8d := edi (input file descriptor)
31 FF                # xor.r>rm r[di]rm[di]
                     # rdi := 0 (kernel decides mapping address)
FF C6                # grp5 inc[si]
                     # esi (file size) := esi + 1
BA 00000001          # mov.im>d im32[1]
                     # rdx := 1 (protection flags - PROT_READ)
41 BA 00000002       # rexb mov.im>10 im32[2]
                     # r10 := 2 (mapping flags - MAP_PRIVATE)
45 31 C9             # rexrb xor.r>rm r[9]rm[9]
                     # r9 := 0 (no offset)
B8 00000009          # mov.im>a im32[9]
                     # rax := 9 (mmap syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := input file mapping base address (map input file)
48 89 C5             # rexw mov.r>rm r[a]rm[bp]
                     # rbp := input file mapping base address
44 89 C7             # rexr mov.r>rm r[8]rm[di]
                     # rdi := r8d (input file descriptor)
48 3D FFFFF000       # rexw cmp.a-im im32[FFFFF000]
                     # set flags for rax-FFFFF000
72 29                # jc rel8[29]
                     # if carry flag set (rax < FFFFF000) rip := rip + 29
B8 00000003          # mov.im>a im32[3]
                     # rax := 3 (close syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := status (close input file descriptor)
BF 00000002          # mov.im>di im32[2]
                     # rdi := 2 (stderr)
BE 00401157          # mov.im>si im32[401157]
                     # rsi := msg5@401157
BA 00000019          # mov.im>d im32[19]
                     # rdx := 19 (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000005          # mov.im>di im32[5]
                     # rdi := 5 (status code)
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C (exit syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 5
B8 00000003          # mov.im>a im32[3]
                     # rax := 3 (close syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := status (close input file descriptor)
BF 00402000          # mov.im>di im32[402000]
                     # rdi := 402000 (address of output)
BE 00001000          # mov.im>si im32[1000]
                     # rsi := 1000 (length of output)
45 31 C0             # rexrb xor.r>rm r[8]rm[8]
                     # r8 := 0 (output length)
EB 15                # jmp8 rel8[15]
                     # rip := rip + 15
48 FF C5             # rbp := rbp + 1 (address of next byte)
                     # put address of next byte into rbp
8A 45 00             # mov.rm8>r8 r[a]rm[mbp+disp8] disp8[0]
                     # al := int8@rbp
84 C0                # test.r8&r8m r[a]rm[a]
                     # set flags for al and al (identity)
840F 000000F6        # fjz rel32[F6]
                     # if zero flag set (al = 0) rip := rip + F6
3C 0A                # cmp.al-im8 im8[A]
                     # set flags of al - A
75 EE                # jnz rel8[-12]
                     # if zero flag is not set (al = A) rip := rip - 12
48 FF C5             # rexw grp5 inc[bp]
                     # rbp := rbp + 1
8A 45 00             # mov.rm8>r8 r[a]rm[mbp+disp8] disp8[0]
                     # al := int8@rbp
84 C0                # test.r8&r8m r[a]rm[a]
                     # set flags for al and al (identity)
840F 000000E4        # fjz rel32[E4]
                     # if zero flag is set (al = 0) rip := rip + E4
3C 20                # cmp.al-im8 im8[20]
                     # set flags for al - 20 (space)
74 EE                # jz rel8[-12]
                     # if zero flag is set (al = 20) rip := rip - 12
3C 0A                # cmp.al-im8 im8[A]
                     # set flags for al - A (newline)
74 EA                # jz rel8[-16]
                     # if zero flag is set (al = A) rip := rip - 16
3C 23                # cmp.al-im8 im8[23]
                     # set flags for al - 23 (#)
74 D4                # jz rel8[-2C]
                     # if zero flag is set (al = 23) rip := rip - 2C
2C 30                # sub.im8>al im8[30]
                     # al := al - 30 (0)
72 14                # jc rel[14]
                     # if carry flag is set (al < 30) rip := rip + 14
3C 0A                # cmp.al-im8 im8[A]
                     # set flags for al - A (newline)
72 34                # jc rel[34]
                     # if carry flag is set (al < A) rip := rip + 34
2C 11                # sub.im8>al im8[11]
                     # al := al - 11
72 0C                # jc rel[C]
                     # if carry flag is set (al < 11) rip := rip + C
3C 06                # cmp.al-im8 im8[6]
                     # set flags for al - 6
72 2A                # jc rel[2A]
                     # if carry flag is set (al < 6) rip := rip + 2A
2C 20                # sub.im8>al im8[20]
                     # al := al - 20
72 04                # jc rel[4]
                     # if carry flag is set (al < 20) rip := rip + 4
3C 06                # cmp.al-im8 im8[6]
                     # set flags for al - 6
72 22                # jc rel[22]
                     # if carry flag is set (al < 6) rip := rip + 22
BF 00000002          # mov.im>edi im32[2]
                     # rdi := 2 (stderr)
BE 00401170          # mov.im>si im32[401170]
                     # rsi := msg6@401170
BA 00000012          # mov.im>d im32[12]
                     # rdx := 12 (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000006          # mov.im>di im32[6]
                     # rdi := 6
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 6
04 0A                # add.im8>al im8[A]
                     # al := al + A
41 B9 00000002       # rexb mov.im>9 im32[2]
                     # r9d := 2
31 DB                # xor.r>rm r[b]rm[b]
                     # ebx := 0
08 C3                # or.r8>r8m r[a]rm[b]
                     # bl := al or bl
48 FF C5             # rexw grp5 inc[bp]
                     # rbp := rbp + 1
8A 45 00             # mov.rm8>r8 r[a]rm[mbp+disp8] disp8[0]
                     # al := int8@rbp
3C 30                # cmp.al-im8 im8[30]
                     # set flags for al - 30
72 49                # jc rel[49]
                     # if carry flag is set (al < 30) rip := rip + 49
2C 30                # sub.im8>al im8[30]
                     # al := al - 30
3C 0A                # cmp.al-im8 im8[A]
                     # set flags for al - A
72 12                # jc rel[12]
                     # if carry flag is set (al < A) rip := rip + 12
2C 11                # sub.im8>al im8[11]
                     # al := al - 11
72 BE                # jc rel[-42]
                     # if carry flag is set (al < 11) rip := rip - 42
3C 06                # cmp.al-im8 im8[6]
                     # set flags for al - 6
72 08                # jc rel[8]
                     # if carry flag is set (al < 6) rip := rip + 8
2C 20                # sub.im8>al im8[20]
                     # al := al - 20
72 B6                # jc rel[-4A]
                     # if carry flag is set (al < 20) rip := rip - 4A
3C 06                # cmp.al-im8 im8[6]
                     # set flags for al - 6
73 B2                # jnc rel[-4E]
                     # if carry flag is not set (al >= 6) rip := rip - 4E
04 0A                # add.im8>al im8[A]
                     # al := al + A
48 C1 E3 04          # rexw grp2 shl[b] im8[4]
                     # rbx := rbx << 4
08 C3                # or.r8>r8m r[a]rm[b]
                     # bl := bl or al
41 FE C1             # rexb grp4 inc[9]
                     # r9b := r9b + 1
41 80 F9 12          # rexb grp1.im8>rm8 cmp[9] im8[12]
                     # set flags for r9d - 12
72 CF                # jc rel[-31]
                     # if carry flag is set (r9d < 12) rip := rip - 31
BF 00000002          # mov.im>edi im32[2]
                     # rdi := 2 (stderr)
BE 00401182          # mov.im>si im32[401182]
                     # rsi := msg7@401182
BA 0000001B          # mov.im>d im32[1B]
                     # rdx := 1B (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000007          # mov.im>di im32[7]
                     # rdi := 7
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 7
4D 89 C4             # rexwrb mov.r>rm r[8]rm[12]
                     # r12 := r8
41 D0 E9             # rexb grp2.r8m shr[9]
                     # r9d := r9d >> 1
4D 01 C8             # rexwrb add.r>rm r[9]rm[8]
                     # r8 := r8 + r9
41 39 F0             # rexb cmp.rm-r r[si]rm[8]
                     # set flags for r8d - esi
76 18                # jbe rel8[18]
                     # if carry or zero flag is set (r8d <= esi) rip := rip + 18
B8 00000019          # mov.im>a im32[19]
                     # eax := 19 (mremap syscall)
8D 96 00001000       # lea.m>r r[d]rm[msi+disp32] disp32[1000]
                     # edx := rsi + 1000
41 BA 00000001       # rexb mov.im>10 im32[1]
                     # r10d := 1
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := new address of output
48 89 C7             # rexw mov.r>rm r[a]rm[di]
                     # rdi := rax
89 D6                # mov.r>rm r[d]rm[si]
                     # esi := edx
31 C0                # xor.r>rm r[a]rm[a]
                     # eax := 0
41 88 1C 3C          # rexb mov.r8>rm8 r[b]rm[sib] s[1]i[mdi]d[m12]
                     # int8@(r12+rdi) := bl
48 C1 EB 08          # rexw grp2.rm.im8 shr[b] im8[8]
                     # rbx := rbx >> 8
FE C0                # grp4 inc[a]
                     # al := al + 1
49 FF C4             # rexwb grp5 inc[12]
                     # r12 := r12 + 1
44 38 C8             # rexr cmp.r8m-r8 r[9]rm[a]
                     # set flags for al - r9b
75 EE                # jnz rel8[-12]
                     # if zero flag is not set (al != r9b) rip := rip - 12
E9 FFFFFF11          # jmp32 rel32[-EF]
                     # rip := rip - EF
48 89 FB             # rexw mov.r>rm  r[di]rm[b]
                     # rbx := rdi (base address of output)
48 8B 7C 24 18       # rexw mov.rm>r r[di]rm[sib+disp8] s[1]i[n]b[msp] rel8[18]
                     # rdi := qword@(rsp+18)
BE 00000241          # mov.im>si im32[241]
                     # esi := 241
BA 000001FF          # mov.im>d im32[1FF]
                     # edx := 1FF
B8 00000002          # mov.im>a im32[2]
                     # eax := 2
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := output file descriptor (open output file)
85 C0                # test.r&rm r[a]rm[a]
                     # set flags of rax and rax (identity)
79 22                # jns rel8[22]
                     # if signed flag is not set rip := rip + 22
BF 00000002          # mov.im>edi im32[2]
                     # rdi := 2 (stderr)
BE 0040119D          # mov.im>si im32[40119D]
                     # rsi := msg8@40119D
BA 0000001B          # mov.im>d im32[1B]
                     # rdx := 1B (len of str)
B8 00000001          # mov.im>a im32[1]
                     # rax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write error message to stderr)
BF 00000008          # mov.im>di im32[8]
                     # rdi := 8
B8 0000003C          # mov.im>a im32[3C]
                     # rax := 3C
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 8
89 C7                # mov.r>rm r[a]rm[di]
                     # edi := eax (file descriptor of output file)
48 89 DE             # rexw mov.r>rm r[b]rm[si]
                     # rsi := rbx (base address of output)
44 89 E2             # rexr mov.r>rm r[12]rm[d]
                     # edx := r12d (total length of output)
B8 00000001          # mov.im>a im32[1]
                     # eax := 1 (write syscall)
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := length written (write output to output file)
B8 00000003          # mov.im>a im32[3]
                     # eax := 3
050F                 # syscall (rcx := rip, r11 := rflags)
                     # rax := status (close output file descriptor)
B8 0000003C          # mov.im>a im32[3C]
                     # eax := 3C
31 FF                # xor.r>rm r[di]rm[di]
                     # edi := 0
050F                 # syscall (rcx := rip, r11 := rflags)
                     # exit with status code 0
